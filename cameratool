#!/usr/bin/env python
# -*- coding:utf-8 -*- 
import subprocess
import re
import sqlite3
import os
import time
import sys

ADB_PATH = '/usr/bin/adb '
POWER_PATH='/sys/power/wake_lock'
CAMERA_PACKAGE_NAME=['org.codeaurora.snapcam',
                     'com.tct.camera3',
                     'com.android.camera2',
                    ]
DB_PATH='/home/liubo/tool_bin/tool_bin/tool_bin.db'


configure = {
        'default_package':'',
        'default_adb':''
        }


def send_command(command=""):
    ret = subprocess.Popen(command, shell=True, stdin=None, stdout=subprocess.PIPE,  stderr=subprocess.PIPE)
    ret.wait();
    return ret.communicate();

def root_remount():
    result = send_command(''.join((ADB_PATH,' root ', POWER_PATH)) )[0].replace('\r','').replace('\n', '')
    while 'already running as root' not in result:
        result = send_command(''.join((ADB_PATH,' root ', POWER_PATH)) )[0].replace('\r','').replace('\n', '')
    send_command(''.join((ADB_PATH,' wait-for-device ', POWER_PATH)) )[0].replace('\r','').replace('\n', '')
    send_command(''.join((ADB_PATH,' remount ', POWER_PATH)) )[0].replace('\r','').replace('\n', '')


def check_powerstate():
    root_remount()
    result = send_command(''.join((ADB_PATH,' shell cat ', POWER_PATH)) )[0].replace('\r','').replace('\n', '')
    if len(result) < 5:
        # screen off
        return False;
    else:
        #double check brightness
        result = send_command(''.join([ADB_PATH, ' shell cat ', '/sys/class/leds/lcd-backlight/brightness']))[0].replace('\r', '').replace('\n', '')
        br = int(result)
        if br == 0:
            return False
        else:
            send_command(''.join((ADB_PATH, 'shell input keyevent 82')))[0].replace('\r','').replace('\n','')
            return True;

        pass

def edit_config_file():
    pass


def screen_on():
    root_remount()
    ret = send_command(''.join((ADB_PATH, 'shell input keyevent 26')))[0].replace('\r','').replace('\n','')
    ret = send_command(''.join((ADB_PATH, 'shell input keyevent 82')))[0].replace('\r','').replace('\n','')
    print 'Screen On Success, Setting Never Screen Off...'
    ret = send_command(''.join((ADB_PATH, 'shell settings put global stay_on_while_plugged_in 3')))[0].replace('\r','').replace('\n','')
    ret = send_command(''.join((ADB_PATH, 'shell settings put system dim_screen 1')))
    ret = send_command(''.join((ADB_PATH, 'shell settings put system screen_off_timeout 2147483647')))


def get_device_name():
    root_remount()
    ret = send_command(''.join((ADB_PATH, ' shell settings get global device_name')))[0].replace('\r','').replace('\n','')
    return ret

def all_no_mark_app():
    root_remount()
    ret = send_command(''.join((ADB_PATH, ' shell settings put secure install_non_market_apps 1')))[0].replace('\r','').replace('\n','')

def get_android_id():
    root_remount()
    ret = send_command(''.join((ADB_PATH, ' shell settings get secure android_id')))[0].replace('\r','').replace('\n','')
    return ret

def get_named_pid(name=[]):
    structs_dict = []
    retturn_dict = []
    root_remount()
    ret = send_command(''.join((ADB_PATH, 'shell ps')))[0]
    lines = ret.split("\r\n")
    for i in lines:
        if '\r' in i or '\n' in i or '' == i:
            continue
        r = re.search('^(\S*) *(\S*).* (\S*)', i)
        structs_dict.append(dict({
            'usr':str(r.groups()[0]),
            'pid':str(r.groups()[1]),
            'name':str(r.groups()[2])
            }))
    for i in structs_dict:
        for j in name:
            if j in i['name']:
                retturn_dict.append(i)
                i['package'] = str(j)

    return retturn_dict
    pass

def get_camera_packages(tarlist = []):
    mlist = []
    root_remount()
    ret = send_command(''.join((ADB_PATH, 'shell pm list package')))[0]
    lines = ret.split("\r\n")
    for i in lines:
        for j in tarlist:
            if j in i:
                mlist.append(re.search('package:(.*)', i).group(1))
    return mlist


def check_service_status():
    r = get_named_pid(['mm-qcamera-daemon', 'mediaserver'])
    if len(r) == 2:
        return True
    else:
        return False

def get_adb_serinu():
    root_remount()
    ret = send_command(''.join((ADB_PATH, ' devices -l')))[0]
    lines = ret.split('\n')
    t = 0;
    devices = []
    for i in lines:
        if 'List of devices attached' in i:
            continue
        if '' == i:
            continue
        devices.append(str(i))

    lines = devices
    j = 0
    if len(lines) != 1:
        print 'One more devices connect to your usb, plz select'
        for i in lines:
            print '[%d] %s'%(j, i)
            j += 1
        inp = raw_input("plz select:")
        j = int(inp)

    ret = re.search('^(.*?) *device (.*?) *model:(.*?) *device:(.*?)$', lines[j])
    if ret:
        return dict({
                'serinu':ret.groups()[0],
                'module':ret.groups()[2],
                'device':ret.groups()[3]
            })
    else:
        return None

def save_package_in_db(pack = '', adb={}):
    conn = sqlite3.connect(DB_PATH, timeout=5.5)
    if not os.path.exists(DB_PATH):
        conn.execute('''
                CREATE TABLE "cameratool" (
                devices     TEXT not null,
                package     TEXT not null,
                adbnu       TEXT,
                module      TEXT
                )
                ''')
    #check if exists
    ret = conn.execute('''
                SELECT devices, package, serinu  FROM cameratool
                        where devices="%s" and adbnu="%s" and module="%s"'
            '''%(adb['device'], adb['serinu'], adb['module']))
    if not ret.fetchone():
        conn.execute('''
                INSERT INTO cameratool (devices, package, adbnu, module) VALUES ("%s", "%s", "%s", "%s")'''
                % (adb['device'], pack, adb['serinu'], adb['module']))
    else:
        #update
        conn.execute('''
                UPDATE cameratool SET package="%s" WHERE devices="%s" and adbnu="%s"
                ''' %(pack, adb['device'], adb['serinu']))
    conn.commit()
    conn.close()
    pass

def select_package():
    #get running package
    ret = get_camera_packages(CAMERA_PACKAGE_NAME)
    if len(ret) != 1:
        print 'There is one more camera packages in your devices, PLZ select one to run...'
        print ''
        j = 0
        for i in ret:
            print ''.join('     [%d] %s'%(j, i))
            j += 1
        se = raw_input('\nPLZ input [%d - %d]  '%(0, j-1))
        #en = raw_input('[Y/N] ')
        #if en == 'Y' or en == 'y':
        #    save_package_in_db(ret[int(se)])
        return ret[int(se)]
    else:
        return ret[0];




def fill_configure():
    pass


#commands
def start_camera():
    if not check_powerstate():
        screen_on()
    if not check_service_status():
        print 'ERROR:MediaService or mm-qcmaera_daemon not running!!'
        return None
    if configure['default_package'] != '':
        ret = configure['default_package']
    else:
        runnpkg = get_named_pid(CAMERA_PACKAGE_NAME)
        if len(runnpkg) == 1:
            ret = runnpkg[0]['package']
            configure['default_package'] = ret
            print 'Camera Already Running... '
            print '  packagename: %s, pid: %s, command:%s' %(runnpkg[0]['package'], runnpkg[0]['pid'],
                    runnpkg[0]['name'])
            return
        else:
            ret = select_package()
    root_remount()
    send_command(''.join([ADB_PATH,' shell am start -W %s'%(ret)]))


    pass


def stop_camera():
    if not check_powerstate():
        screen_on()
    if not check_service_status():
        print 'ERROR:MediaService or mm-qcmaera_daemon not running!!'
        return

    if configure['default_package'] != '':
        ret = configure['default_package']
    else:
        runnpkg = get_named_pid(CAMERA_PACKAGE_NAME)
        if len(runnpkg) == 1:
            ret = runnpkg[0]['package']
            configure['default_package'] = ret
        elif len(runnpkg) == 0:
            return
    send_command(''.join([ADB_PATH,' shell am force-stop %s'%(ret)]))
    pass


def restart_camera():
    stop_camera()
    start_camera()
    pass


def stop_service():
    pids = get_named_pid(['mediaserver', 'mm-qcamera-daemon'])
    for i in pids:
        print 'Found process name: %s; pid: %s; user:%s' %(i['name'], i['pid'], i['usr'])
    send_command(''.join([ADB_PATH,' root && ', ' wait-for-device']))
    send_command(''.join([ADB_PATH,' root && ', ' wait-for-device']))
    send_command(''.join([ADB_PATH,' shell stop qcamerasvr']))
    send_command(''.join([ADB_PATH,' shell stop media']))
    pass

def start_service():
    send_command(''.join([ADB_PATH,' root && ', ' wait-for-device']))
    send_command(''.join([ADB_PATH,' root && ', ' wait-for-device']))
    send_command(''.join([ADB_PATH,' shell start qcamerasvr']))
    send_command(''.join([ADB_PATH,' shell start media']))
    time.sleep(0.5)
    pids = get_named_pid(['mediaserver', 'mm-qcamera-daemon'])
    for i in pids:
        print 'Found process name: %s; pid: %s; user:%s' %(i['name'], i['pid'], i['usr'])
    pass

def restart_service():
    stop_service()
    start_service()
    pass

def restart_all():
    stop_camera()
    stop_service()
    start_service()
    start_camera()
    pass




mselect_package = ''


def print_usetage():
    print 'Ustage:'
    print '  cameratool start_camera    Start a Camera'
    print '  cameratool stop_camera     Stop a Camera'
    pass

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print_usetage()
        sys.exit()
    if sys.argv[1] == 'start_camera':
        start_camera()

    if sys.argv[1] == 'stop_camera':
        stop_camera()

    if sys.argv[1] == 'restart_camera':
        restart_camera()

    if sys.argv[1] == 'start_service':
        start_service()

    if sys.argv[1] == 'stop_service':
        stop_service()

    if sys.argv[1] == 'restart_service':
        restart_service()

    if sys.argv[1] == 'restart_all':
        restart_all()






